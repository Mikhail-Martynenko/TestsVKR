{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misha\\\\Desktop\\\\\\u042E\\u0424\\u0423\\\\React\\\\tests-vkr\\\\app-test-vkr\\\\src\\\\EarcutTest.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport earcut from \"earcut\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EarcutTest = () => {\n  _s();\n\n  let canvas = document.getElementById('canvas');\n  let context = canvas.getContext('2d'); // Скопировал с другого компонента, т.к. сейчас лень переделывать, в некст раз объединить компоненты или придумать что-нибудь другое, чтобы не дублировать код\n  // попробовать увеличить количество точек и посмотреть на качество триангуляции\n\n  function calcLengthSidesTriangles(arrCoordinatesVerticesTriangle) {\n    let a, b, c;\n    let arrLengthSidesTriangles = arrCoordinatesVerticesTriangle.map(elementArr => {\n      a = Math.round(Math.abs(Math.sqrt(Math.pow(elementArr[2] - elementArr[0], 2) + Math.pow(elementArr[3] - elementArr[1], 2))));\n      b = Math.round(Math.abs(Math.sqrt(Math.pow(elementArr[4] - elementArr[0], 2) + Math.pow(elementArr[5] - elementArr[1], 2))));\n      c = Math.round(Math.abs(Math.sqrt(Math.pow(elementArr[4] - elementArr[2], 2) + Math.pow(elementArr[5] - elementArr[3], 2))));\n      return [a, b, c];\n    });\n    console.log(arrLengthSidesTriangles);\n    calсQualityMesh(arrLengthSidesTriangles);\n  }\n\n  const [stateTriangulation, setStateTriangulation] = useState(\"Неизвестное качество сетки триангуляции\"); // Вычисление качество триангуляции сетки\n\n  function calсQualityMesh(arr) {\n    let newArr = arr.map(elementArr => Math.round((Math.max.apply(null, elementArr) - Math.min.apply(null, elementArr)) / Math.max.apply(null, elementArr) * 100));\n    const initialValue = 0;\n    const sumElementsArr = newArr.reduce((previousValue, currentValue) => previousValue + currentValue, initialValue);\n    let mean = sumElementsArr / newArr.length;\n    console.log(newArr);\n    console.log(sumElementsArr);\n    console.log(mean);\n\n    if (mean <= 10) {\n      setStateTriangulation(`Триангуляция отличная - ${mean}%`);\n    } else if (mean > 10 && mean <= 20) {\n      setStateTriangulation(`Триангуляция хорошая - ${mean}%`);\n    } else if (mean > 20 && mean <= 40) {\n      setStateTriangulation(`Триангуляция нормальная - ${mean}%`);\n    } else {\n      setStateTriangulation(`Триангуляция плохая - ${mean}%`);\n    }\n  } // function drawCircle() {\n  //     context.beginPath();\n  //     context.fillStyle = \"#FFF\";\n  //     context.arc(300, 300, 200, 0, Math.PI * 2);\n  //     context.fill();\n  //     context.stroke();\n  //     context.closePath();\n  // }\n  // drawCircle()\n  //let triangles = earcut([10,0, 0,50, 60,60, 70,10]); // returns [1,0,3, 3,2,1]\n  // quadrate\n  //  let a = [\n  //      [[0,100],[100,100],[100,0],[0,0]], //outer polygon\n  //      [[25,25],[75,25],[75,75],[25,75]] //hole\n  //  ]\n\n  /*\r\n   //  function triangulationCircle(stepСircle) {\r\n   //     const pointsForCircle = [];\r\n   //\r\n   //      let radius = 200;\r\n   //      let x = null;\r\n   //      let y = null;\r\n   //      pointsForCircle.push([300, 300]);\r\n   //      for (let phi = 0; phi <= 360; phi += stepСircle) {\r\n   //          x = Math.abs(Math.floor(radius * Math.cos(phi)) + 300);\r\n   //          y = Math.abs(Math.floor(radius * Math.sin(phi)) + 300);\r\n   //          pointsForCircle.push([x, y]);\r\n   //      }\r\n   //      const arrResult = [];\r\n   //      arrResult.splice(0,0,pointsForCircle)\r\n   //      console.log(arrResult)\r\n   //\r\n   //      triangulationEarcut(arrResult)\r\n   //  }\r\n   //  triangulationCircle(40);\r\n  */\n  // // circle\n  //  let circle = [\n  //      [[104,343],[115,222],[150,449],[243,491],[480,214],[277,101],[365,489],[397,125],[462,416]], //outer polygon\n  //     // [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]] //hole\n  //  ]\n  //polygon\n\n\n  let polygon = [[[0, 0], [500, 0], [500, 500], [400, 500], [400, 250], [100, 250], [100, 500], [0, 500]] //outer polygon\n  //[[250,50],[250,100],[100,100],[100,50]] //hole\n  ];\n  const rectangleArrayPoints = [[[0, 0], [600, 0], [600, 300], [0, 300]] //outer polygon\n  //  [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]] //hole\n  ]; //rectangle\n\n  function addPointsRectangle() {\n    const rectangleArrayPoints2 = [];\n\n    for (let x = 0; x <= 600; x += 50) {\n      for (let y = 0; y <= 300; y += 50) {\n        rectangleArrayPoints2.push([x, y]); //x+600, y+150\n      }\n    }\n  }\n\n  function triangulationEarcut(array) {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    let toProcess = earcut.flatten(array);\n    let result = earcut(toProcess.vertices, toProcess.holes, toProcess.dimensions);\n    console.log(toProcess);\n    console.log(result);\n    let v = toProcess.vertices;\n    let arrCoordinatesVerticesTriangle = [];\n\n    for (let i = 0; i < result.length; i += 3) {\n      arrCoordinatesVerticesTriangle.push([v[result[i] * 2], v[result[i] * 2 + 1], v[result[i + 1] * 2], v[result[i + 1] * 2 + 1], v[result[i + 2] * 2], v[result[i + 2] * 2 + 1]]);\n      context.beginPath();\n      context.moveTo(v[result[i] * 2], v[result[i] * 2 + 1]);\n      context.lineTo(v[result[i + 1] * 2], v[result[i + 1] * 2 + 1]);\n      context.lineTo(v[result[i + 2] * 2], v[result[i + 2] * 2 + 1]);\n      context.closePath();\n      context.stroke();\n    }\n\n    console.log(arrCoordinatesVerticesTriangle);\n    calcLengthSidesTriangles(arrCoordinatesVerticesTriangle); // Правильность триангуляции\n    // let deviation = earcut.deviation(toProcess.vertices, toProcess.holes, toProcess.dimensions, result);\n    // console.log(deviation)\n    // if (deviation < 0.1) {\n    //     setStateTriangulation(`Триангуляция отличная`)\n    // }\n    // else if (deviation > 0.1 && deviation <= 0.2) {\n    //     setStateTriangulation(`Триангуляция хорошая`)\n    // }\n    // else if (deviation > 0.2 && deviation <= 0.4) {\n    //     setStateTriangulation(`Триангуляция нормальная`)\n    // }\n    // else {\n    //     setStateTriangulation(`Триангуляция плохая`)\n    // }\n  } // function triangulationButton(e) {\n  //\n  //     e.preventDefault();\n  //     triangulationEarcut(rectangleArrayPoints)\n  //\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Earcut\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => triangulationEarcut(rectangleArrayPoints),\n      children: \"\\u0422\\u0440\\u0438\\u0430\\u043D\\u0433\\u0443\\u043B\\u044F\\u0446\\u0438\\u044F \\u043F\\u0440\\u044F\\u043C\\u043E\\u0443\\u0433\\u043E\\u043B\\u044C\\u043D\\u0438\\u043A\\u0430 Earcut\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => triangulationEarcut(polygon),\n      children: \"\\u0422\\u0440\\u0438\\u0430\\u043D\\u0433\\u0443\\u043B\\u044F\\u0446\\u0438\\u044F \\u043C\\u043D\\u043E\\u0433\\u043E\\u0443\\u0433\\u043E\\u043B\\u044C\\u043D\\u0438\\u043A\\u0430 Earcut\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => triangulationEarcut(rectangleArrayPoints),\n        children: \"\\u0422\\u0440\\u0438\\u0430\\u043D\\u0433\\u0443\\u043B\\u044F\\u0446\\u0438\\u044F \\u043F\\u0440\\u044F\\u043C\\u043E\\u0443\\u0433\\u043E\\u043B\\u044C\\u043D\\u0438\\u043A\\u0430 Earcut\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: stateTriangulation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EarcutTest, \"X1gCwlpH46G0tfJdWsrskRlGPog=\");\n\n_c = EarcutTest;\nexport default EarcutTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"EarcutTest\");","map":{"version":3,"sources":["C:/Users/misha/Desktop/ЮФУ/React/tests-vkr/app-test-vkr/src/EarcutTest.jsx"],"names":["React","useEffect","useRef","useState","earcut","EarcutTest","canvas","document","getElementById","context","getContext","calcLengthSidesTriangles","arrCoordinatesVerticesTriangle","a","b","c","arrLengthSidesTriangles","map","elementArr","Math","round","abs","sqrt","pow","console","log","calсQualityMesh","stateTriangulation","setStateTriangulation","arr","newArr","max","apply","min","initialValue","sumElementsArr","reduce","previousValue","currentValue","mean","length","polygon","rectangleArrayPoints","addPointsRectangle","rectangleArrayPoints2","x","y","push","triangulationEarcut","array","clearRect","width","height","toProcess","flatten","result","vertices","holes","dimensions","v","i","beginPath","moveTo","lineTo","closePath","stroke"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState}  from 'react';\r\nimport earcut from \"earcut\";\r\n\r\nconst EarcutTest = () => {\r\n    let canvas = document.getElementById('canvas');\r\n    let context = canvas.getContext('2d');\r\n\r\n    // Скопировал с другого компонента, т.к. сейчас лень переделывать, в некст раз объединить компоненты или придумать что-нибудь другое, чтобы не дублировать код\r\n    // попробовать увеличить количество точек и посмотреть на качество триангуляции\r\n    function calcLengthSidesTriangles(arrCoordinatesVerticesTriangle) {\r\n        let a, b, c;\r\n        let arrLengthSidesTriangles = arrCoordinatesVerticesTriangle.map(elementArr => {\r\n            a = Math.round(Math.abs(Math.sqrt(Math.pow((elementArr[2] - elementArr[0]), 2) + Math.pow((elementArr[3] - elementArr[1]), 2))));\r\n            b = Math.round(Math.abs(Math.sqrt(Math.pow((elementArr[4] - elementArr[0]), 2) + Math.pow((elementArr[5] - elementArr[1]), 2))));\r\n            c = Math.round(Math.abs(Math.sqrt(Math.pow((elementArr[4] - elementArr[2]), 2) + Math.pow((elementArr[5] - elementArr[3]), 2))));\r\n            return [a, b, c];\r\n        })\r\n        console.log(arrLengthSidesTriangles)\r\n        calсQualityMesh(arrLengthSidesTriangles)\r\n    }\r\n\r\n\r\n    const [stateTriangulation, setStateTriangulation] = useState(\"Неизвестное качество сетки триангуляции\")\r\n\r\n// Вычисление качество триангуляции сетки\r\n    function calсQualityMesh(arr) {\r\n        let newArr = arr.map(elementArr =>\r\n            Math.round(((Math.max.apply(null, elementArr) - Math.min.apply(null, elementArr)) / Math.max.apply(null, elementArr)) * 100)\r\n        )\r\n        const initialValue = 0;\r\n        const sumElementsArr = newArr.reduce((previousValue, currentValue) => previousValue + currentValue, initialValue);\r\n        let mean = sumElementsArr / newArr.length;\r\n        console.log(newArr)\r\n        console.log(sumElementsArr)\r\n        console.log(mean)\r\n        if (mean <= 10) {\r\n            setStateTriangulation(`Триангуляция отличная - ${mean}%`)\r\n        } else if (mean > 10 && mean <= 20) {\r\n            setStateTriangulation(`Триангуляция хорошая - ${mean}%`)\r\n        } else if (mean > 20 && mean <= 40) {\r\n            setStateTriangulation(`Триангуляция нормальная - ${mean}%`)\r\n        } else {\r\n            setStateTriangulation(`Триангуляция плохая - ${mean}%`)\r\n        }\r\n    }\r\n    // function drawCircle() {\r\n    //     context.beginPath();\r\n    //     context.fillStyle = \"#FFF\";\r\n    //     context.arc(300, 300, 200, 0, Math.PI * 2);\r\n    //     context.fill();\r\n    //     context.stroke();\r\n    //     context.closePath();\r\n    // }\r\n    // drawCircle()\r\n    //let triangles = earcut([10,0, 0,50, 60,60, 70,10]); // returns [1,0,3, 3,2,1]\r\n    // quadrate\r\n    //  let a = [\r\n    //      [[0,100],[100,100],[100,0],[0,0]], //outer polygon\r\n    //      [[25,25],[75,25],[75,75],[25,75]] //hole\r\n    //  ]\r\n    /*\r\n     //  function triangulationCircle(stepСircle) {\r\n     //     const pointsForCircle = [];\r\n     //\r\n     //      let radius = 200;\r\n     //      let x = null;\r\n     //      let y = null;\r\n     //      pointsForCircle.push([300, 300]);\r\n     //      for (let phi = 0; phi <= 360; phi += stepСircle) {\r\n     //          x = Math.abs(Math.floor(radius * Math.cos(phi)) + 300);\r\n     //          y = Math.abs(Math.floor(radius * Math.sin(phi)) + 300);\r\n     //          pointsForCircle.push([x, y]);\r\n     //      }\r\n     //      const arrResult = [];\r\n     //      arrResult.splice(0,0,pointsForCircle)\r\n     //      console.log(arrResult)\r\n     //\r\n     //      triangulationEarcut(arrResult)\r\n     //  }\r\n     //  triangulationCircle(40);\r\n  */\r\n\r\n\r\n    // // circle\r\n    //  let circle = [\r\n    //      [[104,343],[115,222],[150,449],[243,491],[480,214],[277,101],[365,489],[397,125],[462,416]], //outer polygon\r\n    //     // [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]] //hole\r\n    //  ]\r\n\r\n    //polygon\r\n    let polygon = [\r\n        [[0, 0], [500, 0], [500, 500], [400, 500], [400, 250], [100, 250], [100, 500], [0, 500]], //outer polygon\r\n         //[[250,50],[250,100],[100,100],[100,50]] //hole\r\n    ]\r\n    const rectangleArrayPoints = [\r\n        [[0, 0], [600, 0], [600, 300], [0, 300]], //outer polygon\r\n        //  [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]] //hole\r\n    ]\r\n    //rectangle\r\n    function addPointsRectangle() {\r\n        const rectangleArrayPoints2 = [];\r\n        for (let x = 0; x <= 600; x += 50) {\r\n            for (let y = 0; y <= 300; y += 50) {\r\n                rectangleArrayPoints2.push([x, y]);//x+600, y+150\r\n            }\r\n        }\r\n    }\r\n\r\n    function triangulationEarcut(array) {\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        let toProcess = earcut.flatten(array);\r\n        let result = earcut(toProcess.vertices, toProcess.holes, toProcess.dimensions);\r\n        console.log(toProcess)\r\n        console.log(result)\r\n        let v = toProcess.vertices\r\n        let arrCoordinatesVerticesTriangle = [];\r\n        for (let i = 0; i < result.length; i += 3) {\r\n            arrCoordinatesVerticesTriangle.push(\r\n                [\r\n                    v[result[i] * 2], v[result[i] * 2 + 1],\r\n                    v[result[i + 1] * 2], v[result[i + 1] * 2 + 1],\r\n                    v[result[i + 2] * 2], v[result[i + 2] * 2 + 1]\r\n                ]\r\n            );\r\n            context.beginPath();\r\n            context.moveTo(v[result[i] * 2], v[result[i] * 2 + 1])\r\n            context.lineTo(v[result[i + 1] * 2], v[result[i + 1] * 2 + 1])\r\n            context.lineTo(v[result[i + 2] * 2], v[result[i + 2] * 2 + 1])\r\n            context.closePath();\r\n            context.stroke();\r\n        }\r\n        console.log(arrCoordinatesVerticesTriangle)\r\n        calcLengthSidesTriangles(arrCoordinatesVerticesTriangle)\r\n        // Правильность триангуляции\r\n        // let deviation = earcut.deviation(toProcess.vertices, toProcess.holes, toProcess.dimensions, result);\r\n        // console.log(deviation)\r\n        // if (deviation < 0.1) {\r\n        //     setStateTriangulation(`Триангуляция отличная`)\r\n        // }\r\n        // else if (deviation > 0.1 && deviation <= 0.2) {\r\n        //     setStateTriangulation(`Триангуляция хорошая`)\r\n        // }\r\n        // else if (deviation > 0.2 && deviation <= 0.4) {\r\n        //     setStateTriangulation(`Триангуляция нормальная`)\r\n        // }\r\n        // else {\r\n        //     setStateTriangulation(`Триангуляция плохая`)\r\n        // }\r\n    }\r\n    // function triangulationButton(e) {\r\n    //\r\n    //     e.preventDefault();\r\n    //     triangulationEarcut(rectangleArrayPoints)\r\n    //\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <div><h1>Earcut</h1></div>\r\n            <button onClick={ () => triangulationEarcut(rectangleArrayPoints)}>Триангуляция прямоугольника Earcut</button>\r\n            <button onClick={ () => triangulationEarcut(polygon)}>Триангуляция многоугольника Earcut</button>\r\n            <div>\r\n            <button onClick={ () => triangulationEarcut(rectangleArrayPoints)}>Триангуляция прямоугольника Earcut</button>\r\n            </div>\r\n            <div>\r\n                <h2>{stateTriangulation}</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EarcutTest;"]},"metadata":{},"sourceType":"module"}