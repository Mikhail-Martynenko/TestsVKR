{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\misha\\\\Desktop\\\\\\u042E\\u0424\\u0423\\\\React\\\\tests-vkr\\\\app-test-vkr\\\\src\\\\EarcutTest.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport earcut from \"earcut\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EarcutTest = () => {\n  _s();\n\n  let canvas = document.getElementById('canvas');\n  let context = canvas.getContext('2d'); // function drawCircle() {\n  //     context.beginPath();\n  //     context.fillStyle = \"#FFF\";\n  //     context.arc(300, 300, 200, 0, Math.PI * 2);\n  //     context.fill();\n  //     context.stroke();\n  //     context.closePath();\n  // }\n  // drawCircle()\n  //let triangles = earcut([10,0, 0,50, 60,60, 70,10]); // returns [1,0,3, 3,2,1]\n  // quadrate\n  //  let a = [\n  //      [[0,100],[100,100],[100,0],[0,0]], //outer polygon\n  //      [[25,25],[75,25],[75,75],[25,75]] //hole\n  //  ]\n\n  /*\r\n   //  function triangulationCircle(stepСircle) {\r\n   //     const pointsForCircle = [];\r\n   //\r\n   //      let radius = 200;\r\n   //      let x = null;\r\n   //      let y = null;\r\n   //      pointsForCircle.push([300, 300]);\r\n   //      for (let phi = 0; phi <= 360; phi += stepСircle) {\r\n   //          x = Math.abs(Math.floor(radius * Math.cos(phi)) + 300);\r\n   //          y = Math.abs(Math.floor(radius * Math.sin(phi)) + 300);\r\n   //          pointsForCircle.push([x, y]);\r\n   //      }\r\n   //      const arrResult = [];\r\n   //      arrResult.splice(0,0,pointsForCircle)\r\n   //      console.log(arrResult)\r\n   //\r\n   //      triangulationEarcut(arrResult)\r\n   //  }\r\n   //  triangulationCircle(40);\r\n  */\n  // // circle\n  //  let circle = [\n  //      [[104,343],[115,222],[150,449],[243,491],[480,214],[277,101],[365,489],[397,125],[462,416]], //outer polygon\n  //     // [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]] //hole\n  //  ]\n  //polygon\n\n  let polygon = [[[0, 0], [500, 0], [500, 500], [400, 500], [400, 250], [100, 250], [100, 500], [0, 500]] //outer polygon\n  //[[250,50],[250,100],[100,100],[100,50]] //hole\n  ]; //rectangle\n\n  let rectangleArrayPoints = [[[0, 0], [600, 0], [600, 300], [0, 300]] //outer polygon\n  //  [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]] //hole\n  ];\n  const [stateTriangulation, setStateTriangulation] = useState(\"Неизвестное качество сетки триангуляции\");\n\n  function triangulationEarcut(array) {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    let toProcess = earcut.flatten(array);\n    let result = earcut(toProcess.vertices, toProcess.holes, toProcess.dimensions);\n    console.log(toProcess);\n    console.log(result);\n    let v = toProcess.vertices;\n\n    for (let i = 0; i < result.length; i += 3) {\n      context.beginPath();\n      context.moveTo(v[result[i] * 2], v[result[i] * 2 + 1]);\n      context.lineTo(v[result[i + 1] * 2], v[result[i + 1] * 2 + 1]);\n      context.lineTo(v[result[i + 2] * 2], v[result[i + 2] * 2 + 1]);\n      context.closePath();\n      context.stroke();\n    }\n\n    let deviation = earcut.deviation(toProcess.vertices, toProcess.holes, toProcess.dimensions, result);\n    console.log(deviation);\n\n    if (deviation < 0.1) {\n      setStateTriangulation(`Триангуляция отличная`);\n    } else if (deviation > 0.1 && deviation <= 0.2) {\n      setStateTriangulation(`Триангуляция хорошая`);\n    } else if (deviation > 0.2 && deviation <= 0.4) {\n      setStateTriangulation(`Триангуляция нормальная`);\n    } else {\n      setStateTriangulation(`Триангуляция плохая`);\n    }\n  } // function triangulationButton(e) {\n  //\n  //     e.preventDefault();\n  //     triangulationEarcut(rectangleArrayPoints)\n  //\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Earcut\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => triangulationEarcut(rectangleArrayPoints),\n      children: \"\\u0422\\u0440\\u0438\\u0430\\u043D\\u0433\\u0443\\u043B\\u044F\\u0446\\u0438\\u044F \\u043F\\u0440\\u044F\\u043C\\u043E\\u0443\\u0433\\u043E\\u043B\\u044C\\u043D\\u0438\\u043A\\u0430 Earcut\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => triangulationEarcut(polygon),\n      children: \"\\u0422\\u0440\\u0438\\u0430\\u043D\\u0433\\u0443\\u043B\\u044F\\u0446\\u0438\\u044F \\u043C\\u043D\\u043E\\u0433\\u043E\\u0443\\u0433\\u043E\\u043B\\u044C\\u043D\\u0438\\u043A\\u0430 Earcut\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: stateTriangulation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EarcutTest, \"X1gCwlpH46G0tfJdWsrskRlGPog=\");\n\n_c = EarcutTest;\nexport default EarcutTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"EarcutTest\");","map":{"version":3,"sources":["C:/Users/misha/Desktop/ЮФУ/React/tests-vkr/app-test-vkr/src/EarcutTest.jsx"],"names":["React","useEffect","useRef","useState","earcut","EarcutTest","canvas","document","getElementById","context","getContext","polygon","rectangleArrayPoints","stateTriangulation","setStateTriangulation","triangulationEarcut","array","clearRect","width","height","toProcess","flatten","result","vertices","holes","dimensions","console","log","v","i","length","beginPath","moveTo","lineTo","closePath","stroke","deviation"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState}  from 'react';\r\nimport earcut from \"earcut\";\r\n\r\nconst EarcutTest = () => {\r\n    let canvas = document.getElementById('canvas');\r\n    let context = canvas.getContext('2d');\r\n\r\n    // function drawCircle() {\r\n    //     context.beginPath();\r\n    //     context.fillStyle = \"#FFF\";\r\n    //     context.arc(300, 300, 200, 0, Math.PI * 2);\r\n    //     context.fill();\r\n    //     context.stroke();\r\n    //     context.closePath();\r\n    // }\r\n    // drawCircle()\r\n    //let triangles = earcut([10,0, 0,50, 60,60, 70,10]); // returns [1,0,3, 3,2,1]\r\n    // quadrate\r\n    //  let a = [\r\n    //      [[0,100],[100,100],[100,0],[0,0]], //outer polygon\r\n    //      [[25,25],[75,25],[75,75],[25,75]] //hole\r\n    //  ]\r\n    /*\r\n     //  function triangulationCircle(stepСircle) {\r\n     //     const pointsForCircle = [];\r\n     //\r\n     //      let radius = 200;\r\n     //      let x = null;\r\n     //      let y = null;\r\n     //      pointsForCircle.push([300, 300]);\r\n     //      for (let phi = 0; phi <= 360; phi += stepСircle) {\r\n     //          x = Math.abs(Math.floor(radius * Math.cos(phi)) + 300);\r\n     //          y = Math.abs(Math.floor(radius * Math.sin(phi)) + 300);\r\n     //          pointsForCircle.push([x, y]);\r\n     //      }\r\n     //      const arrResult = [];\r\n     //      arrResult.splice(0,0,pointsForCircle)\r\n     //      console.log(arrResult)\r\n     //\r\n     //      triangulationEarcut(arrResult)\r\n     //  }\r\n     //  triangulationCircle(40);\r\n  */\r\n\r\n\r\n    // // circle\r\n    //  let circle = [\r\n    //      [[104,343],[115,222],[150,449],[243,491],[480,214],[277,101],[365,489],[397,125],[462,416]], //outer polygon\r\n    //     // [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]] //hole\r\n    //  ]\r\n\r\n    //polygon\r\n    let polygon = [\r\n        [[0, 0], [500, 0], [500, 500], [400, 500], [400, 250], [100, 250], [100, 500], [0, 500]], //outer polygon\r\n         //[[250,50],[250,100],[100,100],[100,50]] //hole\r\n    ]\r\n\r\n    //rectangle\r\n    let rectangleArrayPoints = [\r\n        [[0, 0], [600, 0], [600, 300], [0, 300]], //outer polygon\r\n        //  [[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]] //hole\r\n    ]\r\n\r\n  const [stateTriangulation, setStateTriangulation] = useState(\"Неизвестное качество сетки триангуляции\")\r\n\r\n    function triangulationEarcut(array) {\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        let toProcess = earcut.flatten(array);\r\n        let result = earcut(toProcess.vertices, toProcess.holes, toProcess.dimensions);\r\n        console.log(toProcess)\r\n        console.log(result)\r\n        let v = toProcess.vertices\r\n        for (let i = 0; i < result.length; i += 3) {\r\n            context.beginPath();\r\n            context.moveTo(v[result[i] * 2], v[result[i] * 2 + 1])\r\n            context.lineTo(v[result[i + 1] * 2], v[result[i + 1] * 2 + 1])\r\n            context.lineTo(v[result[i + 2] * 2], v[result[i + 2] * 2 + 1])\r\n            context.closePath();\r\n            context.stroke();\r\n        }\r\n\r\n        let deviation = earcut.deviation(toProcess.vertices, toProcess.holes, toProcess.dimensions, result);\r\n        console.log(deviation)\r\n        if (deviation < 0.1) {\r\n            setStateTriangulation(`Триангуляция отличная`)\r\n        }\r\n        else if (deviation > 0.1 && deviation <= 0.2) {\r\n            setStateTriangulation(`Триангуляция хорошая`)\r\n        }\r\n        else if (deviation > 0.2 && deviation <= 0.4) {\r\n            setStateTriangulation(`Триангуляция нормальная`)\r\n        }\r\n        else {\r\n            setStateTriangulation(`Триангуляция плохая`)\r\n        }\r\n    }\r\n    // function triangulationButton(e) {\r\n    //\r\n    //     e.preventDefault();\r\n    //     triangulationEarcut(rectangleArrayPoints)\r\n    //\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <div><h1>Earcut</h1></div>\r\n            <button onClick={ () => triangulationEarcut(rectangleArrayPoints)}>Триангуляция прямоугольника Earcut</button>\r\n            <button onClick={ () => triangulationEarcut(polygon)}>Триангуляция многоугольника Earcut</button>\r\n            <div>\r\n                <h2>{stateTriangulation}</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EarcutTest;"]},"metadata":{},"sourceType":"module"}